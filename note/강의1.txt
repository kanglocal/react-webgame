* React 사용  이유
1. Single Page Application 이기 때문에 깜빡임없이 넘어간다. 모바일화면에서도 잘 나오고?
앱과 비슷한 느낌. Ui/UX 가 좋아진다.
2. 재사용 컴포넌트( 중복요소 하나로 묶을 수 있다!)
3. 데이터 화면 일치


* setState 는 비동기이다!!
* setState 할 때 reder 가 다시 된다!!!
* setState 할 때 render가 다시되기때문에 태그안에 함수를 직접입력하면 함수가 랜더될때마다 새로 생성되기때문에
함수는 밖에서 선언해주는 것이 좋다.

* 웹팩을 쓰는 이유
1. 실제로 개발할 때 중복없애주고 console.log 도없앨수있고 수만개의 컴포넌트들을 합쳐서 한 파일로 만들어준다.(페이스북 컴포넌트 2만개래)
- node 를 알아야해. 웹팩하려면! (node = javascript 실행기)

* node 랑 npm 깔아야해.
1. 해당 폴더에 들어간다.(지금 열려있는 폴더(=react-webgame))
2. npm init > package name 을 정한다. 나머지는 다 넘어간다.
 author 는 내 이름.
 license 는 MIT << 무슨 뜻?
 react 랑 react dom 이 필요하다.
5. npm i react react-dom >> npm이 react 랑 reactdom 을 설치해준다. >> packge.json 에 설치된거 뜬다.
6. npm i -D webpack webpack-cli >> react 할 때 필요한 webpack 을 설치한다. 웹팩이랑 웹팩cli를 다 설치해야함.
 -D는 개발용이라는 뜻임.(실제서비스할때에는 웹팩 필요없음.)

 * jsx 와 js 의 차이?
 - jsx 문법쓸거면 확장자를 jsx 로 써야한다.>> jsx 파일이 있다는건 react 전용 파일이라는 뜻으로 알려주기때문.

 7. 바벨을 설치한다. 바벨도 개발용으로만 사용하고 실제 배포할때는 사용하지 않음.
  npm i -D @babel/core @babel/preset-env @babel/preset-react 
  core : 바벨의 기본적인것들이 들어있음. preset-env : 우리의 브라우저에 맞게 알아서 마법같이 최신문법을 옛날문법으로 바꿔준다.
  preset-react : jsx 같은것들 지원한다. 
  8. npm i babel-loader
  얘는 바벨이랑 웹팩을 연결해준다.
  9. class 에 state = {} 하는 거를 쓰려면 추가해야하는것:
  npm i -D @babel/plugin-proposal-class-properties

  * 자동빌드방법?
  1. 명령어 : npm i react-refresh @pmmmwh/react-refresh-webpack-plugin -D
  2. 개발용서버가 필요해 명령어 : npm i -D webpack-dev-server

* require 와 import 차이?
- require 는 node 의 모듈 시스템이다.
- { hot }  구조분해로 되어있는 애는 왜 이럴가? : 그냥 구조분해 문법이다. 
   WordRelay 파일 보면 맨아래에 "module.exports = WordRelay;" 이거 쓰면 client.jsx 에서
   "const WordRelay = require('./WordRelay_hooks');" 일케 가져다 쓰잖아. module.exports  호환되는게
   exports default 인데, (exports default WordRlay == module.exports = WordRelay)
   exports default 로 익스포트된애들은 import 할때도 그냥 변수명으로 import aaa  로 쓰면되고
   익스포트할때 변수에 넣은애들 예를들어 export const hello = 'hello' 이런애들은 임포트할때 import { hello } 이렇게 해야한다.
- require 랑 import 랑 호환되는경우도 있다.
- require = import
- moule.exports = exports default
- 엄밀히따지면 export default 랑 module.exports 랑 다른거지만 리액트정도에서는 호환된다고 생각해도된다.
- module.exports = { hello: 'a'}; = exports hello = 'a'
- 각각 es2015 문법, commonjs 문법 이라 부른다.
- node 에서는 require 만 써야함. 그런데 import 써있는부분도 잘 돌아가는 이유는 babel 이 바꿔주기 때문.
- require : node 거 / import, export : react 거
- webpack.config.js 는 node 가 돌리기때문에 import 쓰면 안돼. 꼭 const 로 써야한다.
- clienjsx 는 웹팩의 바벨이 나중에 바꿔주기때문에 import 써도되긴하다.


* 자식들이 다 pureComponent 나 memo이면 부모에도 둘 중 하나를 적용할 수 있다.


* 컴포넌트의 라이프 싸이클!!
client.jsx 에서 불려와서 컴포넌트가 렌더링 되잖아, 이 때 컴포넌트가 돔에 갖다 붙는 순간이 있다.
이 순간에 특정 동작을 할 수 있다.
렌더함수가 실행되면 리액트가 jsx를 돔에 붙이는데 이 순간에 특정동작을 할 수 있게 할수있다.

1) class의 경우 : constructor -> render -> ref -> componentDidMount -> (setState/props 바뀔 때 -> shouldComponentUpdate값이 true -> 
render -> componentDidUpdate) -> 부모가 나를 없앴을 떄 -> componentWillunmount -> 소멸

* customHook
훅들을 직접 만든다!!

